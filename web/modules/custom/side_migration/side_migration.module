<?php

/**
 * @file
 * Primary module hooks for Side migration module.
 */


/**
 * @file
 * Hooks for UMSI import.
 */

use Drupal\Core\Database\Database;
use Drupal\group\Entity\Group;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Row;
use Drupal\user\Entity\User;

/**
 * @file
 * Provides hooks and helper functions for the side_migration module.
 */

/**
 * Implements hook_migrate_prepare_row().
 */
//function side_migration_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
//  $id = $migration->id();
//  $node_migrations = [
//    'node_blog',
//    'node_news',
//    'node_news_i18n',
//    'node_page',
//    'node_page_i18n',
//    'node_faq',
//  ];
//
//  // In node migrations collect paragraphs IDs from fields that aren't
//  // paragraphs in D7.
//  if (in_array($id, $node_migrations)) {
//    $nid = $row->getSourceProperty('nid');
//
//    // Adds pseudo paragraphs to the field field_paragraphs.
//    $field_paragraphs = $row->getSourceProperty('field_paragraphs');
//
//    // Adds paragraph type to the paragraph field value.
//    if ($field_paragraphs) {
//      foreach ($field_paragraphs as $key => $field_paragraph) {
//        $type = _side_migration_get_paragraph_type($field_paragraph['value']);
//        $delta = _side_migration_get_paragraph_delta($field_paragraph['value'], 'field_paragraphs');
//        $field_paragraphs[$key]['type'] = $type;
//        $field_paragraphs[$key]['delta'] = $delta * 2;
//      }
//    }
//
//    // Creates a pseudo paragraph reference for the body field which becomes
//    // field_paragraphs items in D10.
//    $field_body = $row->getSourceProperty('body');
//    if ($field_body) {
//      foreach ($field_body as $key => $field) {
//
//        // Fetches multiple paragraphs items from a HTML text.
//        $paragraphs_from_html = side_migration_extract_paragraphs_from_html($field['value']);
//        foreach ($paragraphs_from_html as $key => $paragraph_from_html) {
//          $field_paragraphs[] = [
//            'value' => "222_{$nid}_{$paragraph_from_html['key']}",
//            'delta' => -9 + $key,
//          ];
//        }
//      }
//    }
//
//    // Creates a pseudo paragraph reference for the field field_answer which
//    // becomes an item of the field_paragraphs field in D9.
//    $field_answer = $row->getSourceProperty('field_answer');
//    if ($field_answer) {
//
//      foreach ($field_answer as $key => $field) {
//
//        // Fetches multiple paragraphs items from a HTML text.
//        $paragraphs_from_html = side_migration_extract_paragraphs_from_html($field['value']);
//        foreach ($paragraphs_from_html as $key => $paragraph_from_html) {
//          $field_paragraphs[] = [
//            'value' => "666_{$nid}_{$paragraph_from_html['key']}",
//            'delta' => -9 + $key,
//          ];
//        }
//      }
//    }
//
//    // Creates pseudo paragraphs for D7 paragraphs that become other kind
//    // of paragraphs in D10.
//    if ($field_paragraphs) {
//      foreach ($field_paragraphs as $key => $field_paragraph) {
//
//        if (isset($field_paragraph['type']) && $field_paragraph['type'] === '2_column_text_alignment') {
//
//          // Adds pseudo paragraphs item for the 2_column_text_alignment
//          // paragraph type. In D7 this is a paragraph with multiple fields for
//          // 2 columns. In D10 each column becomes its own paragraph.
//          $pid = $field_paragraph['value'];
//          $field_paragraphs[] = [
//            'value' => "{$pid}_col1",
//            'revision_id' => $field_paragraph['revision_id'],
//            'delta' => $field_paragraph['delta'],
//          ];
//          $field_paragraphs[] = [
//            'value' => "{$pid}_col2",
//            'revision_id' => $field_paragraph['revision_id'],
//
//            // Adds 1 weight point to the second column in order for it to
//            // appear after the first column :|.
//            'delta' => $field_paragraph['delta'] + 1,
//          ];
//          unset($field_paragraphs[$key]);
//        }
//      }
//    }
//
//    // Sorts paragraphs and pseudo paragraphs according to weight.
//    if ($field_paragraphs) {
//      $delta = array_column($field_paragraphs, 'delta');
//      array_multisort($delta, SORT_ASC, $field_paragraphs);
//    }
//
//    // Adds pseudo paragraph references to the source row.
//    $row->setSourceProperty('field_paragraphs', $field_paragraphs);
//
//    // Adds pseudo paragraphs to the field field_related.
//    $field_related = $row->getSourceProperty('field_related');
//
//    // Creates a pseudo paragraph reference for the link field which becomes
//    // a paragraph item referred to by field_paragraphs field in D9.
//    $field_links = $row->getSourceProperty('field_links');
//    if ($field_links) {
//      $field_related[] = [
//        'value' => "222${nid}",
//        'delta' => -7,
//      ];
//    }
//
//    // Creates a pseudo paragraph reference for the field_document field which
//    // becomes an item of the field_paragraphs field in D9.
//    $field_document = $row->getSourceProperty('field_document');
//    if ($field_document) {
//      foreach ($field_document as $value) {
//        $field_related[] = [
//          'value' => $value['fid'],
//          'delta' => -8,
//        ];
//      }
//    }
//
//    // Creates a pseudo paragraph reference for the field_sidebox_image field
//    // which becomes an item of the field_related field in D9.
//    $field_sidebox_image = $row->getSourceProperty('field_sidebox_image');
//    if ($field_sidebox_image) {
//      foreach ($field_sidebox_image as $value) {
//        $field_related[] = [
//          'value' => $value['fid'],
//          'delta' => -8,
//        ];
//      }
//    }
//
//    // Creates a pseudo paragraph reference for the sideboxtext field which
//    // becomes an item of the field_related field in D9.
//    $field_body = $row->getSourceProperty('field_sidebox_text');
//    if ($field_body) {
//      foreach ($field_body as $key => $field) {
//        // Fetches multiple paragraphs items from a HTML text.
//        $paragraphs_from_html = side_migration_extract_paragraphs_from_html($field['value']);
//        foreach ($paragraphs_from_html as $key => $paragraph_from_html) {
//          $field_related[] = [
//            'value' => "444_{$nid}_{$paragraph_from_html['key']}",
//            'delta' => -9 + $key,
//          ];
//        }
//      }
//    }
//
//    $row->setSourceProperty('field_related', $field_related);
//  }
//
//  $node_webform_migrations = [
//    'node_page_from_webform',
//    'node_page_from_webform_i18n',
//  ];
//
//  if (in_array($id, $node_webform_migrations)) {
//    $nid = $row->getSourceProperty('nid');
//
//    // Creates a pseudo paragraph reference for the body field which becomes
//    // an item of the field_paragraphs field in D9.
//    $field_body = $row->getSourceProperty('body');
//    if ($field_body) {
//      foreach ($field_body as $key => $field) {
//
//        // Fetches multiple paragraphs items from a HTML text.
//        $paragraphs_from_html = side_migration_extract_paragraphs_from_html($field['value']);
//        foreach ($paragraphs_from_html as $key => $paragraph_from_html) {
//          $field_paragraphs[] = [
//            'value' => "222_{$nid}_{$paragraph_from_html['key']}",
//            'delta' => -9 + $key,
//          ];
//        }
//      }
//    }
//
//    // Adds pseudo paragraphs item for the webform. In D10 it becomes a
//    // paragraph.
//    $field_paragraphs[] = [
//      'value' => "{$nid}",
//      'revision_id' => '',
//    ];
//
//    $row->setSourceProperty('field_paragraphs', $field_paragraphs);
//
//  }
//
//}

/**
 * Implements hook_migrate_MIGRATION_ID_prepare_row().
 */
function side_migration_migrate_node_landing_page_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {

  // Creates pseudo paragraph references for D7 homebox blocks on group nodes
  // that should become paragraphs on groups in D10.
  $field_paragraphs = $row->getSourceProperty('field_paragraphs');

  // Fetches d7 photo widget settings of this group.
  $gid = $row->getSourceProperty('nid');

  $connection = Database::getConnection('default', 'migrate');
  $query = $connection->select('homebox_pages', 'hp')
    ->fields('hp', ['settings']);
  $query->condition('hp.name', "node_{$gid}");
  $settings = $query->execute()->fetchField();
  // @codingStandardsIgnoreStart
  $settings = unserialize($settings);
  // @codingStandardsIgnoreStop
  $blocks = $settings['blocks'];

  // Adds pseudo paragraphs for column dividers.
  $regions = [];
  foreach ($blocks as $block) {
    $regions[$block['region']][] = $block['weight'];
  }

  // Each group has 3 columns ('regions'). Checks if column has any blocks and
  // check the highest block weight of each column. Adds a pseudo paragraph
  // for a column divider after the 1st and 2nd column.
  for ($k = 1; $k < 3; $k++) {
    if (isset($regions[$k]) && is_array($regions[$k])) {
      $max_delta = max($regions[$k]);
      $field_paragraphs[] = [
        'value' => "divider_{$gid}_{$k}",
        'revision_id' => '',

        // Divider paragraph should be located after the last item in the
        // column.
        'delta' => $max_delta + 1 + ($k * 100),
      ];
    }
  }

  foreach ($blocks as $block) {

    // Checks status of the homebox block.
    if ($block['status']) {

      // Adds pseudo paragraphs item.
      $field_paragraphs[] = [

        // The migration source ID is composed of NID and block module and delta.
        'value' => "{$gid}_{$block['module']}_{$block['delta']}",
        'revision_id' => '',

        // Adds extra weight to ensure items that are together in a column
        // follow each other.
        'delta' => $block['weight'] + $block['region'] * 100,
      ];
    }
  }

  // Adds a psuedo paragraph for the menu.
  $field_paragraphs[] = [
    'value' => "{$gid}_menu_menu",
    'revision_id' => '',
    'delta' => -666,
  ];

  // Sorts paragraphs and pseudo paragraphs according to weight.
  if ($field_paragraphs) {
    $delta = array_column($field_paragraphs, 'delta');
    array_multisort($delta, SORT_ASC, $field_paragraphs);
  }

  // Adds pseudo paragraph references to the source row.
  $row->setSourceProperty('field_paragraphs', $field_paragraphs);
}

///**
// * Implements hook_migrate_MIGRATION_ID_prepare_row().
// */
//function side_migration_migrate_paragraph_text_from_2_column_text_alignment_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
//  // $id = $migration->id();
//  // $wfid = $row->getSourceProperty('webform_id');
//  // if ($wfid === "webform_23292") {
//  // $test = 1;
//  // }
//}
//
///**
// * Fetches the paragraph type from the D7 database.
// *
// * @param int $pid
// *   The paragrap item id.
// *
// * @return string
// *   The paragraph type.
// */
//function _side_migration_get_paragraph_type($pid) {
//  $connection = Database::getConnection('default', 'migrate');
//  $query = $connection->select('paragraphs_item', 'p')
//    ->fields('p', ['bundle']);
//  $query->condition('item_id', $pid);
//  $type = $query->execute()->fetchField();
//  return $type;
//}
//
///**
// * Fetches the paragraph delta from the D7 database.
// *
// * @param int $pid
// *   The paragraph item id.
// *
// * @return string
// *   The paragraph delta.
// */
//function _side_migration_get_paragraph_delta($pid, $field_name) {
//  $connection = Database::getConnection('default', 'migrate');
//  $query = $connection->select("field_data_{$field_name}", 'fd')
//    ->fields('fd', ['delta']);
//  $query->condition("{$field_name}_value", $pid);
//  $delta = $query->execute()->fetchField();
//  return $delta;
//}
//
///**
// * Implements hook_migrate_MIGRATION_ID_prepare_row().
// */
//function side_migration_migrate_node_page_from_photo_widget_page_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
//
//  // Adds pseudo paragraphs item for the field_photo_widget_paragraph
//  // paragraphs. In D7 this is a paragraph with multiple fields for
//  // 2 columns. In D10 each column becomes its own paragraph.
//  $field_paragraphs = $row->getSourceProperty('field_photo_widget_paragraph');
//  foreach ($field_paragraphs as $key => $field_paragraph) {
//    $pid = $field_paragraph['value'];
//    $type = _side_migration_get_paragraph_type($pid);
//    if ($type === 'photo_widget_2_column') {
//      $field_paragraphs[] = [
//        'value' => "{$pid}_col1",
//        'revision_id' => $field_paragraph['revision_id'],
//      ];
//      $field_paragraphs[] = [
//        'value' => "{$pid}_col2",
//        'revision_id' => $field_paragraph['revision_id'],
//      ];
//      unset($field_paragraphs[$key]);
//    }
//  }
//  $row->setSourceProperty('field_photo_widget_paragraph', $field_paragraphs);
//}
//
///**
// * Adds user to groups.
// */
//function _side_migration_add_user_to_groups(int $uid, array $gids) {
//  foreach ($gids as $gid) {
//    $account = User::load($uid);
//    $group = Group::load($gid);
//    $group->addMember($account, [
//      'group_roles' => [
//        'group_admin',
//        'group_member',
//        'group_manager',
//      ],
//    ]);
//    $group->save();
//  }
//}
//
///**
// * Adds user to groups.
// */
//function _side_migration_add_user_to_all_groups(int $uid) {
//  $connection = Database::getConnection();
//  $query = $connection->select("groups_field_data", 'gfd')
//    ->fields('gfd', ['id']);
//  $gids = $query->execute()->fetchCol();
//  _side_migration_add_user_to_groups($uid, $gids);
//}
//
///**
// * Extracts paragraphs from a HTML text value.
// *
// * Checks HTML text for media wysiwyg embed code. If found the embed code
// * is returned as image paragraph item. If not found it is returend as a
// * text paragraph item.
// *
// * @param string $html
// *   HTML text, possibly with media wysisyg embed code.
// *
// * @return array
// *   List of paragraph items.
// */
//function side_migration_extract_paragraphs_from_html($html) {
//
//  // Provides pattern for media embed code.
//  $pattern = '/\<p\>\[\[\{\"fid.*/';
//
//  // Removes strong tag that surrounds media embed code.
//  $html = str_replace('<p><strong>[[', '<p>[[', $html);
//  $html = str_replace(']]</strong></p>', ']]</p>', $html);
//
//  // Searches text for media embed code.
//  preg_match_all($pattern, $html, $array);
//
//  $paragraphs = [];
//  $fids = $array[0];
//  $nr_of_fids = count($fids);
//  $start_positions = [];
//  $end_positions = [];
//
//  // If no embed code found, returns the full HTML text as a text paragraph
//  // item.
//  if ($fids == FALSE) {
//    $paragraphs[] = [
//      'type' => 'text',
//      'value' => $html,
//      'key' => "t_0",
//    ];
//    return $paragraphs;
//  }
//
//  $count = 0;
//
//  // Creates paragraphs for each media embed code found and for the
//  // text that surrounds it.
//  foreach ($fids as $key => $fid) {
//    $fid_length = strlen($fid);
//    $fid_position = strpos($html, $fid);
//    $start_positions[] = $fid_position;
//    $end_positions[] = $fid_position + $fid_length;
//    if ($count === 0) {
//      $text_before_fid = substr($html, 0, $start_positions[$count]);
//    }
//    else {
//      $text_before_fid = substr($html, $end_positions[$count - 1], $start_positions[$count] - $end_positions[$count - 1]);
//    }
//
//    // Creates paragraph for text before the embed code.
//    $paragraphs[] = [
//      'type' => 'text',
//      'value' => $text_before_fid,
//      'key' => "tb_{$key}",
//    ];
//
//    // Creates paragraph for the embed code.
//    $paragraphs[] = [
//      'type' => 'image',
//      'value' => $fid,
//      'file_id' => side_migration_extract_fid($fid),
//      'key' => "im_{$key}",
//    ];
//
//    // Creates paragraph for text after the embed code.
//    if ($count === $nr_of_fids - 1) {
//      $text_after_fid = substr($html, $end_positions[$count], strlen($html) - $end_positions[$count]);
//      $paragraphs[] = [
//        'type' => 'text',
//        'value' => $text_after_fid,
//        'key' => "ta_{$key}",
//      ];
//    }
//    $count++;
//  }
//  return $paragraphs;
//}
//
///**
// * Fetches the D7 file ID from a media wysiwyg embed code.
// */
//function side_migration_extract_fid($value) {
//  $array = [];
//
//  // Provides pattern for media embed code.
//  $pattern = '/\[\[[^\]]+\"fid\"\:\"([0-9]+)\"\,[^\]]+\]\]/i';
//
//  // Searches text for media embed code.
//  preg_match_all($pattern, $value, $array);
//
//  if (empty($array)) {
//    return FALSE;
//  }
//
//  // Returns the FID if found.
//  return $array[1][0];
//}
//
///**
// * Finds all D7 files in use.
// */
//function side_migration_find_d7_files_in_use() {
//  $d7_file_in_use_analyzer = \Drupal::service('side_migration.d7_files_in_user_analyzer');
//  $d7_file_in_use_analyzer->fetchAll();
//}
//
///**
// * Implements hook_webform_migrate_d7_webform_element_ELEMENT_TYPE_alter().
// */
//function side_migration_webform_migrate_d7_webform_element_markup_alter(&$markup, $indent, array $element) {
//  $markup = str_replace('processed_text', 'webform_markup', $markup);
//}
//
///**
// * Implements hook_webform_migrate_d7_webform_element_ELEMENT_TYPE_alter().
// */
//function side_migration_webform_migrate_d7_webform_element_textfield_alter(&$markup, $indent, array &$element) {
//
//  // Replaces D7 token field value with a D10 token.
//  if ($element['value'] === '[current-user:field_firstname]') {
//    $element['value'] = '[current-user:field_name]';
//  }
//}
